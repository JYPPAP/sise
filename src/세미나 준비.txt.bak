[목적] 
TDD를 활용한 React-Native 시세 앱 개발

시세 앱은 출력하는 정보량은 정해져 있으며, 자세한 정보를 보고싶다면 웹 앱으로 이동하게 한다.
[페이지]
  [메인] 4개
    홈
    게임검색
    관심게임
    거래순위
  [세부] 7개
    [앱 접속]
      로딩 페이지 : 첫 로딩 화면
    [메인 페이지 > [>] 버튼 클릭 시]
      설정 : 최상단의 [>] 버튼 클릭 시 출력
      [설정 > 개인정보 처리방침 보기의 [>] 버튼 클릭 시]
	개인정보 처리방침 보기
    [홈 > 게임 이름 클릭 시]
    [게임 검색 > 게임 이름 클릭 시]
    [관심 게임 > 게임 이름 클릭 시]
      서버 목록창 : 해당 게임의 모든 서버와 평균가, 등락 출력
      [서버 목록창 > 서버 클릭 시]
	서버 15일 평균가 창(표 보기)
	[그래프 탭 클릭 시]
	서버 15일 평균가 창(그래프 보기)
    [관심 게임 > [+] 버튼 선택 시]
      추가하기 : 게임목록이 출력되고 게임목록 클릭 시 서버목록 출력, 서버목록 클릭 시 팝업창 출력되고 관심게임 등록 가능
      - 편집하기 : 현재 페이지에서 (-) 버튼이 출력되고 해당 버튼 클릭 시 관심 서버 제거를 물어보는 팝업창 출력
[컴포넌트]
  Root
    header_top
      [메인]
	링크
	로고
	설정
      [세부]
	뒤로가기
	게임 또는 서버명
	[서버]
	  관심 게임 체크(노란 별)
    header_tab
      [메인]
	홈, 게임 검색, 관심 게임, 거래 순위
	탭 바
      [세부]
	X
    container

      [메인]
	[홈]
	  서브 타이틀
	  게임 목록(2열 세로)
	[게임 검색]
	  검색 바
	  게임 목록(세로)
	    - first-child 빼고 bdt 주면 될 것 같음.
	[관심 게임]
	  서브 타이틀
	  게임 > 서버 목록(세로)
	    - first-child 빼고 bdt 주면 될 것 같음.
	[거래 순위]
	  서브 타이틀
	  게임 순위 목록(테이블 형태)
	    - 순위, 게임명, 등락
	    - 게임 클릭 시 웹앱으로 넘어간다.
	  

[환경 설정]
개발환경 : React-Native
TDD 툴 : Jest || React Testing Library
코딩 툴 : VSCode

[오늘 할 일(0610)]
1. TDD 방법을 통해서 개발하려면 어떤 것들이 준비되어야 하는지 알아보고 그 단계들 정의하기
  1. 요구명세? 기능명세 작성하기
    - 이 부분은 "테크스펙"을 작성하는 방향으로 생각해보기
      - 그러면 테크스펙은 어떻게 작성?
	- 그 부분은 대략적으로 적혀있긴 하지만
	  어제 작성해봤을 때 생각해보면 분리를 해야 할 필요가 있어보임.
	  탭이 4가지 이니까 5개로 분리하기.
  	    하나는 기타 페이지
	    탭 4가지에 세부 페이지까지 넣기
	      세부 페이지는 서로 연동된다는 것을 잊지 말기
	      연동되어도 뒤로가기는 이전 페이지로 이동.
  2. 테스 스펙에 맞춰서 테스트 내용 작성하고 테스트 페이지 만들기
2. 정의한 단계를 이용해서 간단한 Todo-List 만들기 전 기초작업 준비하기

[계획]
1. TDD를 하는데 필요한 것들과 단계 정의하기(매우 중요)
  1. 목적 정의하기
  2. 목적에 맞춰서 테스트 코드 작성하기
  3. 테스트 코드 실행하기
  4. 테스트 코드에 맞춰서 프로덕트 코드 작성하기
  5. 테스트 후 다음 목적에 맞는 테스트 코드 작성하기(반복)
2. TDD를 이용해 간단한 React 프로젝트를 정의한 단계에 맞춰서 만들기
3. 


[생각]
# React로 만들고 React-Native로 옮기는 방법
  - 이 부분은 어디에서 문제가 발생할지 잘 모르겠음.
  - 옮기는 부분에서 어느 부분들이 문제가 발생하는지 알아봐야 할 것 같음.
# Jest 나 다른 TDD 툴은 어떤 것들을 활용해야 할까?
  - 일단 찾아본 것들 중 많이 보이는 Jest로 선택하긴 했는데
    실제 사용해보고 동작을 익힌 뒤 여러가지 활용법에 대해서 작성할 필요가 있음.
# 


[좋은 테스트의 특징]
FIRST
Fast : 테스트는 빠르게 동작하여 자주 돌릴 수 있어야 한다.
Independent : 각각의 테스트는 독립적이며 서로 의존해서는 안된다.
Repeatable : 어느 환경에서도 반복 가능해야 한다.
Self-Validating : 테스트는 성공 또는 실패로 Bool 값으로 결과를 내어 자체적으로 검증되어야 한다.
Timely : 테스트는 적시에 즉, 테스트하려는 실제 코드를 구현하기 직전에 구현해야 한다.

[비즈니스 로직]
이 부분은 어떤걸 말하는지 잘 모르겠으니 다시 정의하기
서비스별로 연결하는 부분에 대해서 말하는건가?

[컴포넌트]
컴포넌트에서 생길 수 있는 경우와 테스트 케이스들
1. Props가 잘 받아와 졌는가?
2. State가 의도한 대로 잘 관리되고 있는가?
3. Props나 State를 토대로 Component가 잘 rendering 되고 있는가?
4. event handler 가 잘 동작하고 있는가?
5. lifecycle에 맞게 동작하는가?