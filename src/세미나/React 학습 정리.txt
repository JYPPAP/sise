# React 학습하기

React란 무엇인가?
Javascript의 수많은 문법을 편하게, 효율적으로 사용하기 위해 도움을 주는 라이브러리?

라이브러리와 프레임워크의 차이점은?
# 라이브러리는 필요한 부분만을 단독으로 가져와서 사용할 수 있다.(가벼움)
# 프레임워크는 모든 애플리케이션의 공통적인 부분을 제공
필요한 기능이 이미 만들어져 있어 만들어진 '틀' 안에 '내용물'을 채워넣는 형식

React Native는 모바일 네이티브 앱을 React로 만들 수 있게 해주는 프레임워크

React.JS의 핵심 : Virtual DOM
- React.JS의 핵심은 가상 DOM
- 실제 DOM을 직접 처리하는 행위는 처리해야하는 데이터가 많아질 경우 비효율적.
  성능도 느리고 관리가 힘들다. -> 그런가?
- 자바스크립트 객체에 불과한 Virtual DOM을 사용할 경우 DOM API를 사용하는 것보다 처리가 훨씬 빨라진다.

React.JS의 장점
- 학습이 간단하다. 컴포넌트만 사용하기 때문에 복잡하지 않다.
  > 그런가? 어렵던데..
  > 자습서 이해하기 어렵던데?
- 가상 DOM을 사용한다.
- Garbage Collection, 메모리관리, 성능
- UI를 컴포넌트화 하여 매우 간편한 UI 수정 및 재사용
- 페이스북 개발자들이 만들어 페이스북에서 꾸준히 업데이트를 함 (탄탄한 기반)
- 다른 프레임워크나 라이브러리와 혼용 가능. (이미 완료된 서비스에도 적용 가능)
- *서버 & 클라이언트 사이드 렌더링 모두 지원

* 서버 사이드 렌더링(SSR)의 장점
초기 렌더링을 서버 사이드 렌더링으로 할 경우, 유저에게 쾌적한 사용경험을 제공할 수 있다.
클라이언트 사이드 렌더링은 초기 구동 딜레이가 있다.
서버 측에서 HTML을 미리 생성해서 문자열 형태로 브라우저에 띄움.
SEO 지원 가능.
다만 서버측의 자원을 쓰게 되는 것은 불가피하기 때문에 컴퓨터 성능이 좋지않고 방문자가 많다면 추천하지 않음

React.JS의 단점
- 시각적으로 보여지는 부분만 컨트롤 할 수 있다.
- IE8 이하는 지원하지 않는다.

# React.JS 시작하기
- React 파일은 컴포넌트를 담당
- React DOM 파일은 실제 DOM에 렌더링을 담당
- Babel : 자바스크립트 컴파일러. ES6 -> ES5
- 컴포넌트는 자바스크립트 클래스, 참조 시 <컴포넌트 명/> 형식으로 쓰임.
  소문자로 쓰면 <div> 나 <span> 같은 HTML 태그로 해석되기 때문에 반드시 대문자로 시작

ES6 클래스(Class)
- ES6에 새로 도입된 문법.
- React를 사용할 때는 컴포넌트를 class 또는 함수로 정의할 수 있음. React 컴포넌트 class를 정의하려면 React.Component를 상속받아야 함.
- 사용 전 반드시 선언이 되어야 한다! 선언하지 않고 사용할 경우 ReferenceError 발생.
- 생성자 메소드가 있다. Javascript 클래스 안에서는 메소드만 만들 수 있다.
- 타 객체형 언어들처럼 





특징 3가지
1. 독립적인 컴포넌트
  - React는 UI를 여러 컴포넌트로 쪼개어 만든다.
  - 각 부분들을 독립된 컴포넌트로 만들고, 이를 조립해 화면을 구성한다.
  - 하나를 수정해도 전체 페이지에 반영할 수 있다. 따라서 유지보수가 쉬워진다.

2. 단방향 데이터 흐름
  - 데이터 흐름에서 일어나는 변화를 예측할 수 있다.
  - 데이터 흐름의 이해와 관리가 용이하다.

[정의와 목적 이해하기]
props 가 뭐하는 거지?
  - 상위 컴포넌트가 하위 컴포넌트에 값을 전달할 때 사용한다.(단방향 데이터 흐름)
  - 프로퍼티는 수정할 수 없다는 특징이 있다.(자식 입장에서는 읽기 전용 데이터)
  - 문자열 전달은 ""를, 그 외의 타입에는 {}를 이용해 전달한다.
children 은 뭐하는거지?
제약없는 찍어내기.
태그 내부에 값을 그려준다.
그럼 용도가 어떻게 되는거지?
  - 많은 값을 찍어내는 용도?
  그러면 probs 는 왜 필요한거지?

JS와 HTML을 합쳐서 사용한다.
> PHP랑 HTML을 합쳐서 사용했을 때 좋은 효과를 발휘하듯
JS와 HTML을 합쳐서 JSX를 만들었고, 이로인해 재사용성을 높였다.

구분은 첫 글자를 대문자로 작성한다.
소문자로 사용하면 태그로 읽게된다.

바벨을 사용해서 컴파일 해줘야 한다.
children은 무한히 찍어내도 상관 없다.

함수의 사용은 <Header /> 또는 <Wrapper></Wrapper>와 같이 사용한다.
변수의 사용은 {}로 묶어서 사용한다.


reflow / repaint에 대해서 찾아보기.
reflow 는 ...
DOM 育?레이아웃 수치(W,H,Pos) 변경 시 영향 받은 모든 노드의 수치를 다시 계산하여, 렌더 트리를 재생성하는 과정이며 또한, Reflow 과정이 끝난 후 재 생성된 렌더 트리를 다시 그리게 되는데 이 과정을 repaint 라고 합니다.
repaint는
다시 그리는 것.
CSS가 바뀌었거나, HTML 구조가 변경되었을 때 

[HOOK]
useEffect()
첫 번째 인자로 함수를 가진다.
  함수는 return 하지 않으며, 실행할 함수를 넣어주면 된다.
두 번째 인자로 배열을 가질 수 있다.
  배열은 의존성 값(변경되는 상태 값)을 넣어주면 된다.
  변경되는 값을 넣어주면 해당 값이 변경될 때마다 1번 인자로 넣어준 함수를 실행한다
  두 번째 인자 defendency array를 넣어주지 않으면 모든 변화에 반응하게 된다.
  빈 배열을 넣어주면 처음에만 반응한다.

const [state, setState]
와 같은 형태를 통해서 배열의 각 변수에 원하는 값을 넣을 수 있다.
?? state가 현재 값이고 setState가 변경할 값이었나?
state는 변수 명
setState는 함수 명
React.useState()의 괄호 안에 초기값 넣어주고
setState()함수 만들고 괄호 안에 변경할 값(값 || 함수)만 넣어주는 방식으로 한다.
  - prev라는 이전값을 인자로 받을 수 있다. (prev) => !prev 의 형태로 T/F를 바꿀 수 있다.

state 내부 값은 불변성을 유지해야 한다.

재사용 가능한 컴포넌트를 만든다.
> 변경점이 있는 부분만 잘라다가
또는 용도별로 묶어서 관리.

# 컴포넌트 사이드 이펙트 다루기
#### 사이드 이펙트 = 부수 효과

#### useState = lazy initialize 라는게 있다.
앞에는 값, 뒤에는 함수다.

const [text, setText] = React.useState(() => {
        console.log("   Child useState");
        return "";
});

text는 값, setText는 함수가 된다.
setText(변경할 값);의 형태로 처리하면 된다.
React.useState() 여기에 초기값을 넣어주면 된다.
함수를 넣어서 동작시기를 약간 늦출 수 있다.
  > localStorage에 접근할 때 같은 경우처럼 양이 많거나 해서 로딩이 늦어질 경우 함수형태로 만들면
  그 부분을 어느정도 해결할 수 있다. 로그같은걸 찍어야 할 때도 이렇게 사용한다.

#### useEffect = dependency array
두 번째 인자로 배열을 넣어줌으로써 의존성 배열을 추가할 수 있다.

      React.useEffect(() => {
        // 빈 배열이면 처음에만 반응
        console.log("   Child useEffect, no deps");

        return () => {
          console.log("   Child useEffect [Clean up], no deps");
        }
      }); 
      React.useEffect(() => {
        // 빈 배열이면 처음에만 반응
        console.log("   Child useEffect, empty deps");
        
        return () => {
          console.log("   Child useEffect [Clean up], empty deps");
        }
      }, []); 
      React.useEffect(() => {
        // 빈 배열이면 처음에만 반응
        console.log("   Child useEffect, [text]");

        return () => {
          console.log("   Child useEffect [Clean up], [text]");
        }
      }, [text]);

cleanup 이라는게 있는데 useEffect 에서 함수 내부에서 return을 하게되면
호출 시점이 변경된다.

#### HOOK FLOW ####
 APP render start
 APP useState
 APP render end
 APP useEffect, no deps
 APP useEffect, empty deps
 APP useEffect, [show]
############### // Search 버튼 클릭해 input창을 출력
 APP render start
 APP render end
0번 째 입력
    Child render start
    Child useState
    Child render end
 APP useEffect [Clean up], no deps
 APP useEffect [Clean up], [show]
    Child useEffect, no deps
    Child useEffect, empty deps
    Child useEffect, [text]
 APP useEffect, no deps
 APP useEffect, [show]
1번 째 입력 // input 창에 "ㅎ" 입력
    Child render start
    Child render end
    Child useEffect [Clean up], no deps
    Child useEffect [Clean up], [text]
    Child useEffect, no deps
    Child useEffect, [text]
2번 째 입력 // input 창에 "ㅎ" 추가 입력
    Child render start
    Child render end
    Child useEffect [Clean up], no deps
    Child useEffect [Clean up], [text]
    Child useEffect, no deps
    Child useEffect, [text]
 ############### // Search 버튼을 클릭해 input창 종료
 APP render start
 APP render end
    Child useEffect [Clean up], no deps
    Child useEffect [Clean up], empty deps
    Child useEffect [Clean up], [text]
 APP useEffect [Clean up], no deps
 APP useEffect [Clean up], [show]
 APP useEffect, no deps
 APP useEffect, [show]

* 체크포인트는 
DOM에 변화가 생겼을 때
1. 부모(APP)의 render가 끝나고 자식(Child)의 render가 시작한다.
2. 자식의 render가 끝나면 자식의 useEffect가 시작된다.
3. 자식의 useEffect가 끝나면 그 이후에 부모의 useEffect가 시작된다.
4. clean up으로 만들면 부모의 useEffect가 먼저 실행된다.
5. 자식에만 변화가 있으면 자식만 render 된다.
6. dependency array는 전달받은 값의 변화가 있는 경우에만 동작한다.



# 커스텀 훅 만들기
반복 => 함수로
훅들이 반복 => 커스텀 훅으로
이름은 use로 시작하고 뒷부분은 카멜케이스로 만든다.

# React 스타일 적용하기.
함수에 인자로 받아온다.


## 220527 학습 정리 ##
# 이벤트 처리하기
React 엘리먼트에서 이벤트를 처리하는 방식은 DOM 엘리먼트에서 이벤트를 처리하는 방식과 매우 유사합니다.

- React의 이벤트는 소문자 대산 카멜 케이스를 사용합니다.
- JSX를 사용하여 문자열이 아닌 함수로 이벤트 핸들러를 전달합니다.

예를들어, html은 다음과 같습니다.
<button onclick="activateLasers()">
  Activate Lasers
</button>

React 에서는 약간 다릅니다.
<buttom onClick={activateLasers}>
  Activate Lasers
</button>

또 다른 차이점으로, React에서는 false를 반환해도 기본 동작을 방지할 수 없습니다. 반드시
preventDefault를 명시적으로 호출해야 합니다. 예를 들어, 일반 HTML에서 폼을 제출할 때 가지고 있는 기본 동작을 방지하기 위해 다음과 같은 코드를 작성할 수 있습니다.

<form onsubmit="console.log('You Clicked Submit.'); return false">
  <button type="submit">Submit</button>
</form>

React 에서는 다음과 같이 작성할 수 있습니다.
function Form() {
  function handleSubmit(e) {
    e.preventDefault();
    console.log('You clicked submit.');
  }
  return (
    <form onSubmit={handleSubmit}>
      <button type="submit">Submit</button>
    </form>
  );
}

여기서 e는 합성 이벤트 입니다. React는 W3C 명세에 따라 합성 이벤트를 정의하기 때문에 블우저 호환성에 대해 걱정할 필요가 없습니다. React 이벤트는 브라우저 고유 이벤트와 정확히 동일하게 동작하지 않습니다.

React를 사용할 때 DOM 엘리먼트가 생성된 후 리스너를 추가하기 위해 addEventListener를 호출할 필요가 없습니다. 대신, 엘리먼트가 처음 렌더링될 때 리스너를 제공하면 됩니다.

ES6 클래스를 사용하여 컴포넌트를 정의할 때, 일반적인 패턴은 이벤트 핸들러를 클래스의 메서드로 만드는 것입니다. 예를 들어, Toggle 컴포넌트는 사용자가 "ON" 과 "OFF" 상태를 토글 할 수 있는 버튼을 렌더링 합니다.

class Toggle extends React.Component {
  constructor(props) {
    super(props);
    this.state = {isToggleOn: true};

    // 콜백에서 `this`가 작동하려면 아래와 같이 바인딩 해줘야 합니다.
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick() {
    this.setState(prevState => ({
      isToggleOn: !prevState.isToggleOn
    }));
  }

  render() {
    return (
      <button onClick={this.handleClick}>
	{this.state.isToggleOn ? "ON" : "OFF"}
      </button>
    );
  }
}

ReactDOM.render(
  <Toggle />,
  document.getElementById('root')
);

JSX 콜백 안에서 this의 의미에 대해 주의해야 합니다. Javascript에서 클래스 메서드는 기본적으로 바인딩되어 있지 않습니다. this.handleClick을 바인딩하지 않고 onClick에 전달하였다면, 함수가 실제 호출될 때 this는 undefined가 됩니다.

이는 React만의 특수한 동작이 아니며, Javascript에서 함수가 작동하는 방식의 일부입니다.
일반적으로 onClick={this.handleClick}과 같이 뒤에 ()를 사용하지 않고 메서드를 참조할 경우, 해당 메서드를 바인딩 해야 합니다.

bind를 호출하는 것이 불편하다면, 이를 해결할 수 있는 두 가지 방법이 있습니다.
실험적인 퍼블릭 클래스 필드 문법을 사용하고 있다면, 클래스 필드를 사용하여 콜백을 올바르게 바인딩할 수 있습니다.

class LoggingButton extends React.Component {
  // 이 문법은 `this`가 handleClick 내에서 바인딩되도록 합니다.
  // 주의: 이 문법은 *실험적인* 문법입니다.
  handleClick = () => {
    console.log('this is:', this);
  }

  render() {
    return (
      <button onClick={this.handleClick}>
	Click Me
      </button>
    );
  }
}

이 문법의 문제점은 LoggingButton이 렌더링될 때마다 다른 콜백이 생성된다는 것입니다. 대부분의 경우 문제가 되지 않으나, 콜백이 하위 컴포넌트에 props로 서 전달된다면 그 컴포넌트들은 추가로 다시 렌더링을 수행할 수 있습니다.
이러한 종류의 성능 문제를 피하고자, 생성자 안에서 바인딩하거나 클래스 필드 문법을 사용하는 것을 권장합니다.

이벤트 핸들어에 인자 전달하기

루프 내부에서는 이벤트 핸들러에 추가적인 매개변수를 전달하는 것이 일반적입니다. 예를 들어, id가 행의 ID일 경우 다음 코드가 모두 작동합니다.

<button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>
<button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>

위 두 줄은 동등하며 각각 화살표 함수와 Function.prototype.bind를 사용합니다.

두 경우 모두 React 이벤트를 나타내는 e 인자가 ID 뒤에 두 번째 인자로 전달됩니다.
화살표 함수를 사용하면 명시적으로 인자를 전달해야 하지만 bind를 사용할 경우 추가 인자가 자동으로 전달됩니다.

############################################
############################################
############### 시세 앱 만들기 ##################
############################################
############################################

1. 목업
- 구조와 JSON으로 가져올 값 정리하기
  * 로딩 창
  중앙 로고, 바로 아래의 로딩 원?
  
  # 값
  객체의 형태로 만들기.
  기준은 어떤걸로?
  필요한 값
  0. 날짜
  1. 게임 명
  2. 랭킹(정렬 기준)
  3. 기준
  4. 서버
    4-1. 서버 명
    4-2. 금액

  # 목업 (Basic)
  #root
    #header_top
      .link
      .logo
      .config_app
    === 세부 ===
      .back
      .subtitle
      [favorite_check]
    #header_tab //세부항목일 때 안보임.
      .home
      .search_game
      .favorite_game
      .trade_rank
    #container
      .cont
    === home ===
	.subject
	#home_list
	  .item
      .banner
    === search_game ===
	#search_bar
	#search_list
	  .item
    === favorite_game ===
	.subject
	#favorite_list
	  .item
	#add_favorite_list
	  .add_btn
	  .edit_btn
    === trade_rank ===
	.subject
	#rank_list
	  .item

  # 목업 (Detail)
  root : 전체를 포괄
    * 필요한 값 : 
    header_top : 최상단 메뉴, 탑다운 그라데이션 있음.
      1. 기본 화면 ----------
      link : 클릭 시 웹페이지 출력.
      logo : 동작 없는 이미지, 배경으로 넣으면 해결될지도...
      setting : 설정? 창으로 이동....
	[세부항목 상태]
	- 등록한 관심게임을 터치했을 때
	  뒤로가기 버튼, 서버 명, 관심 상태(노란 별)
      2. 세부 화면 ----------
      back : 뒤로가기 버튼
      subtitle : 세부 페이지일 때 이름 출력 (관심게임 > 서버 선택 시 서버명 출력)
      favorite : 관심게임 > 서버 선택 시(관심게임 > 서버 선택 시 노란 별 추가(클릭 시 관심게임에서 삭제))

    header_tab : 탭 메뉴, 세부 화면일 때는 없어진다.
      1. 기본 화면 ----------
	선택 시 select 클래스 추가하기?
      home
      search_game
      favorite_game
      trade_rank
      tab_bar : 탭 선택 시 아래로 움직인다.
    container : 메인 내용 출력(header_tab 값이 변경될 때 같이 변해야 한다.
      cont : 메인 컨텐츠
      banner : [홈]탭일 때 최하단 배너 출력
   
  


  2. 프레임
    최상단 메뉴
    1	2   3
    1. 클릭 시 웹페이지를 여는 버튼
      - 클릭 시 안내(경고)창이 출력된다.
	[확인]을 클릭하면 아이템매니아 사이트에서 시세 정보를 확인할 수 있다.
	[취소]를 클릭하면 경고창이 꺼진다.
    2. 시세 앱 아이콘
      - 아무 기능이 없다.
    3. 설정 버튼
      - 클릭 시 1은 뒤로가기 버튼, 2는 "설정" 텍스트로 바뀌고 3은 없어진다.
      - 내부에는 정보 > 버전 (v 4. 1.53 ), 개인정보처리방침 > 개인정보처리방침 보기 (>) 클릭
      [개인정보처리방침] 클릭 시 "설정" > "개인정보처리방침"으로 변경되고 개인정보처리방침이 출력된다.
  3. 탭 메뉴
    1	2   3	4
    * 전체적으로 감싸고 있는 영역이 있음.
    * 스와이프 가능

    1. 홈
    - 로딩 후 첫 화면, 선택 시 하단에 파란색 게이지
      - 해당 게이지는 메뉴 선택 시 그 아래쪽까지 이동해야 함.
      - 이것만 따로 영역을 잡아서 선택된 상태에 맞춰서 움직여줘야 할 것 같음.
      - 1 > 4 선택했을 때 2, 3 을 거쳐서 4에 도착해야 함.
      위치별 클래스를 정해놓고? left 값을 변경하는 방향으로 작성하면 되려나?
      transition 걸어놓고 .3
      select 됐을 때 하단의 막대기도 변경하는 방향.
      탭 메뉴와 박스를 하나로 묶고 nth-child 사용해서 n번째 일 때마다 left 값 정해놓고
      nth-child.select ~ tab-bar{left:?}로 하면 될 것 같음.
    아이콘 + "대표 게임"
    
    [값: 게임명 + 해당 게임 시세 링크]
      2 * 6 사이즈로 되어있다.
      리니지W	        메이플스토리
      바람의나라:연	        리니지2M
      리니지M		리니지
      던전앤파이터		패스오브엑자일
      월드오브워크래프트:클래식	바람의나라
      블레이드앤소울		아이온
    최하단에 배너 있음.

    2. 게임검색
      최상단에 검색창이 존재한다.
	- 검색창은 아이콘과 placeholder"게임명을 입력해 주세요" 가 있고 회색 배경이다.
      인기순? 게임명이 나열되어 있다.
	[리스트 형태] 29개
	리니지W, 메이플스토리, 바람의나라:연, 리니지2M, 리니지M, 리니지, 던전앤파이터, 패스오브엑자일, 
	월드오브워크래프트:클래식, 바람의나라, 블레이드앤소울, 아이온, 마비노기, 마비노기영웅전, 리니지2, 
	거상, 로스트아크, 에오스레드, V4, 가디우스, 다크에덴오리진, 라그나로크제로, 블레이드엔소울2, 소울워커, 
	아스텔리아, 언디셈버, 엘리온, 오딘:발할라라이징, 트릭스터M
	- 검색창에 텍스트 입력 시 위의 목록에 있는 게임만 출력된다.
	  - 출력되는 순서도 위의 배열 앞에서부터 검색한다.
	- [게임 선택 시]
	  - 아이콘과 기준: "1억 메소" 와 같이 단위별 금액이 출력된다.
	  - 하단에 테이블 구조로 값이 출력된다.
	  서버   |   평균가   |   등락

	
    3. 관심게임
      * 아이콘과 "관심게임" 텍스트 있음.
      - 아무것도 없는 상태에서는 정중앙에 "아래 + 버튼을 사용하여 관심게임을 추가 해주세요" 텍스트가 출력된다.
	- 관심게임이 있다면 해당 텍스트는 없어진다.
      - 리스트는 최상단과 최하단의 border는 없다.(first-child만 bdt 없애고 전부 border-top 추가하면 될 것 같다.
      - 우측 하단에 [+] 아이콘이 있으며 해당 아이콘을 클릭해 관심게임 > 서버를 추가/편집할 수 있다.
      - [+] 아이콘을 클릭하면 +가 X로 돌아가다가 멈춘다.
      - 팝업?의 형태로 고정된 위치에서 출력된다.
      - 아이콘과 검은 배경, 흰 텍스트가 출력된다.
      - [추가하기]클릭 시 뒤로가기 버튼과 추가하기로 최상단이 변경된다.
        - 리스트 형태로 게임 목록을 확인할 수 있다.
	- 게임 목록 클릭 시 리스트 형태로 된 서버 목록을 확인할 수 있다.
	- 서버 클릭 시 안내(경고)창이 출력된다.
	  - 출력되는 순서는 추가한 순서이다.
	- 추가한 서버가 10개가 되면 더이상 추가할 수 없게된다.
	  - 추가하기를 클릭했을 때 버그로 10번째 서버로 넘어간다.
      - [편집하기]클릭 시 관심게임에 추가한 게임 목록 옆에 [-] 아이콘이 생긴다.
	- [-] 아이콘을 클릭했을 때 안내(경고)창이 출력된다.
	  - 확인 클릭 시 관심 게임은 삭제된다.
      
    4. 거래순위
      * 아이콘과 현재 날짜가 출력된다. YYYY년 MM월 DD일 순위
      구조는 테이블의 형태로 출력하면 될 것 같다.
      순위   |   게임명   |   등락
      - 순위는 1~30까지 30개가 출력된다.
      - 게임명은 게임명 그대로 가져오면 될 것 같다.
      - 등락은 전일 값과 당일 값에서 삼항연산자?를 이용하면 괜찮을 것 같다.
      if 문으로 같은거 먼저 빼고 삼항연산자로 up, down 관련해서 분류해주면 될 것 같다.
      - 해당 게임 선택 시 경고창이 출력되고, [확인]선택 시 웹으로 이동한다.