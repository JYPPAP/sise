작성자: 조영수
조직: 플랫폼개발
마지막 수정일: 2022-06-12
프로덕트 스펙: 
JIRA Epic: 

요약 (Summary)
앱이 처음 열렸을 때, 필요한 정보를 다운로드 및 적용하는 동안 출력되는 로딩 페이지 입니다.
로딩 이미지를 출력합니다, 매 초 값이 정상적으로 받아와졌는지 확인하고 값이 정상적으로 받아와졌다면 로딩 페이지를 종료하고 "홉"탭을 출력합니다.

디자인 적으로 이상하지 않은 로딩바 또는 로딩 이미지를 추가해 데이터를 로딩하는 동안 사용자의 이탈을 방지합니다.

배경 (Background)
해당 페이지가 필요한 이유는 JSON을 이용해 데이터를 가져오는 로딩 시간동안 사용자에게 앱이 고장난 상태가 아닌 필요한 정보를 다운로드 및 적용하고 있다는 점을 알려주기 위해서 입니다.
사용자는 3초 동안 웹사이트가 느리다는 판단이 드는 순간 이탈률이 급격히 높아지기 때문에 성능 뿐 아니라 시각적인 측면으로도 개선해 긍정적인 인식을 줄 필요가 있기 때문이다.

목표 (Goals)
1. 로딩 페이지를 출력합니다.
2. 시세 앱에서 필요한 JSON 파일을 다운로드 합니다.
3. setInterval을 이용해서 (0.5 ~1)초 마다 값이 정상적으로 받아와졌는지를 확인합니다.
4. 값이 정상적으로 받아와졌는지 확인된다면 clearInterval을 이용해서 로딩 페이지를 종료하고 "홈"탭을 출력합니다.

목표가 아닌 것 (Non-goals)
1. 복잡하거나 화려한 로딩 이미지
2. 로딩에 방해가 될 수 있는 로딩 이미지
3. 간단하지 않은 로딩 이미지

계획 (Plan)
https://www.youtube.com/watch?v=Y7pL5wG5QOg
1. 적절한 형태의 로딩 이미지 또는 HTML,CSS를 검색한다.
2. 찾은 페이지에서 비슷한 형태의 로딩 페이지를 구현한다.
	- 배경으로 사용할 이미지와 로딩 이미지를 추가한다.
	- 정상적으로 출력되는지 확인한다.
	- 로딩창으로 사용할 클래스를 생성하고 초기값(constructor)을 지정한다.
		- state에서 isLoading은 true로 한다.
3. 시세 앱에서 필요한 JSON 파일을 다운로드 한다.
	- 다운로드가 완료되면 setState를 이용해 isLoading을 false로 변경한다.
	- isLoading가 false 일 때 "홈" 탭을 출력한다.
<!-- 
4. setInterval을 이용해서 (0.5 ~1)초 마다 값이 정상적으로 받아와졌는지를 확인할 수 있는 코드를 작성합니다.
5. 값이 정상적으로 받아와졌는지 확인된다면 clearInterval을 이용해서 로딩 페이지를 종료하고 "홈"탭을 출력할 수 있도록 하는 함수를 호출합니다.
-->
###############################################
테크 문서에서 가장 긴 파트입니다. 당신이 준비한 모든 리서치, 준비 내용들을 씁니다. 여기에 어떻게 기술적, 엔지니어링적으로 접근할지 상세히 묘사하세요. 만약 어떤 부분을 어떻게 할지 확실히 결정하지 못한 상태라면, 어떤 것들을 고려하고 있는지 다 목록화해서 적으세요. 그러면 이 문서 리뷰어들이 당신의 올바른 결정에 도움을 주게 됩니다. 얼마나 기술적으로 깊게 써야 하는지는 이 테크 스펙의 목적과 독자들에 따라 정합니다. 생산적인 제안을 받을 수 있도록 충분히 상세하게 적으세요.
여기는 어떻게 프로젝트가 다른 시스템들과 상호작용하는지 그림이나 다이어그램을 포함하기 좋은 지점입니다. 사용자와 시스템 간의 시퀀스 다이어그램, 서비스와 API 간의 데이터 흐름 다이어그램, 데이터베이스 ERD 등 다 좋습니다. 
이 테크 스펙이 로우 레벨까지 다뤄야 한다면 HTTP 응답 코드, JSON 요청 / 응답 포맷, 에러 명세 등까지 모두 다뤄져야 합니다.

마일스톤 (Milestones)
1. ~ 6/15: 로딩창 구현

프로젝트를 제 시간에 맞추기 위해 대략적인 마일스톤을 공유하세요.
예)
1. ~ 9/25: BPL 컴포넌트 개발
2. 9/28 ~ 9/29: 실험 변수 추가, 로컬 변수 추가
3. 9/30 ~ 10/4: 추석 연휴!
4. 10/5: 하단 탭 확장 가능한 구조로 리팩토링
5. 10/6 ~ 10/8: 비즈니스 로직 구현
6. 10/12 ~ 10/20: 사용자 이벤트 부착 및 미진한 내용 보충
7. 10/20: 2.45.0 코드 프리즈 (이때까지 내부 기능 테스트, 이벤트 로깅 테스트)
8. 10/21 ~ 10/23: 2.45.0 릴리즈 QA
9. 11/4: 2.45.0 Rollout

