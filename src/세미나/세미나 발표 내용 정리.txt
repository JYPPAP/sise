1. TDD
http://clipsoft.co.kr/wp/blog/tddtest-driven-development-%EB%B0%A9%EB%B2%95%EB%A1%A0/
	- TDD는 무엇인지 정의하기
		- TDD가 어떤 것인지
		- React-Native에서 사용할 때는 어떤 도구들이 있는지
			- React-testing-library 와 jest 합쳐짐.
	- TDD를 하는 이유는 무엇인지
		- TDD는 위험을 지루함으로 바꾸는 방법
		- 테스트에 비례해 줄어드는 비용에 대한 내용 언급
			- 테스트 도구의 성능이 올라감에 따라 장점이 크게 다가올 수 있다.
		- 어떤 상황에서 TDD를 하면 좋은지
			- 처음 해보는, 요구조건이 바뀔 수 있는, 유지보수를 누가 할 지 모를 때 등
	- TDD의 개발 과정은 어떻게 되는지
		- 3단계에 대한 내용 언급
		- 3단계를 지켜야 하는 이유
		- Teatable 가능한 코드를 짜야 한다.
	- TDD 개발의 장단점
		- 장점
			- 재설계 시간 단축
				- 문제를 정의하고 시작
			- 디버깅 시간 단축
				- 유닛 테스팅을 하는 이점
			- 테스트 문서 대체 가능
				- 테스팅 자동화
				- 테스팅 기간 단축
		- 단점
			- 생산성 저하
				- 일정 크기 이하일 때는 그냥 코딩하는게 더 빠르다.

2. 문제 정의
	- 목표 정의하기
	- 페이지 별 문제 정의하기
	- 테크스펙 작성하기
3. 테스트 작성 및 개발
	- 개발환경 세팅....
	- 테스트 코드 작성 및 테스트
	- 리팩터링
4. 결과 및 QnA
	- 구현한 앱 동작 확인 영상 재생
	- QnA