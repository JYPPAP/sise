[목적] 
TDD를 활용한 React-Native 시세 앱 개발

시세 앱은 출력하는 정보량은 정해져 있으며, 자세한 정보의 출력은 웹 앱으로 이동하는 팝업을 출력한다.
메인 페이지에서는 게임의 제목만 출력된다.
세부 페이지에서 상세 내용이 출력된다.
주로 출력되는 항목은 이름이다.
	- 그러면 정렬의 기준은 게임 이름으로 해야할까?
		> ㅇㅇ
		- 게임 이름과 서버별 금액을 따로 만들기
		- 게임 이름만 출력되는 곳이 있고
		- 게임 이름을 기준으로 게임의 서버별 날짜와 금액이 출력되는 부분.
	- 
# 페이지
	[메인] 4개
		홈
		게임검색
		관심게임
		거래순위
	[세부] 7개
		[앱 접속]
			로딩 페이지 : 첫 로딩 화면
		[메인 페이지 > [>] 버튼 클릭 시]
			설정 : 최상단의 [>] 버튼 클릭 시 출력
			[설정 > 개인정보 처리방침 보기의 [>] 버튼 클릭 시]
				개인정보 처리방침 보기
		[홈 > 게임 이름 클릭 시]
		[게임 검색 > 게임 이름 클릭 시]
		[관심 게임 > 게임 이름 클릭 시]
			서버 목록창 : 해당 게임의 모든 서버와 평균가, 등락 출력
			[서버 목록창 > 서버 클릭 시]
				서버 15일 평균가 창(표 보기)
		[그래프 탭 클릭 시]
			서버 15일 평균가 창(그래프 보기)
		[관심 게임 > [+] 버튼 선택 시]
			- 추가하기 : 게임목록이 출력되고 게임목록 클릭 시 서버목록 출력, 서버목록 클릭 시 팝업창 출력되고 관심게임 등록 가능
			  - 기존 화면에 버튼 추가
			편집하기 : 현재 페이지에서 (-) 버튼이 출력되고 해당 버튼 클릭 시 관심 서버 제거를 물어보는 팝업창 출력

# 컴포넌트
	Root
		페이지의 상태를 알려주는 tab, setTab는 어디까지 활용하면 좋을까?
			- MenuTab에서 indicate를 옮길 때
			- container에서 출력되는 메인 컴포넌트를 변경할 때
			- 서브에 사용은 어떻게 하면 좋을까?
				tab에 header_top에 넣을 수 있는 게임 || 서버명을 넣어서 사용하기
					! 그러면 뒤로가기 버튼을 썼을 때 원하는 페이지로 가지 못할 수 있는데
					sub 일 때 {gameName, setGameName}, {serverName, setServerName}을 새로 만들어서 뒤로가기 할 때 이전 타이틀이 있는지를 체크해서 뒤로 가면 될까?
				tab은 뒤로가기 할 때 사용해야 하니까 놔두고
				서브를 새로 생성한다면 관리는 어디서?
				메인 컴포넌트랑 서브 컴포넌트를 따로 만들까?
				아니면 Main State를 따로 생성할까?
				Page State를 세분화 해서 사용할 수 있는 방법에 대해서 찾아보기
				객체 안에 객체의 형태나 배열의 형태로 만들 수 있으면 방법이 나올 수 있을 것 같음.
			1. 뒤로가기를 위해 tab을 남겨놓는다.
			2. 서브에서 활용할 sub state를 새로 생성한다.
			3. sub state에 값이 있을 때 서브 페이지를 출력한다?

		header_top
			[메인 상태]
				링크 : 웹앱으로 연결되는 링크(팝업창)
				로고 : 그냥 이미지, 배경으로 넣어버려도 괜찮으려나?
				설정 : 클릭했을 때, 설정창(세부)으로 이동
			[세부 상태]
				뒤로가기 : 이전 페이지로 이동(Root에서 Props로 받아와야 할 것 같은데..
				타이틀(제목, 게임명, 서버명) : 텍스트만 가져오면 되는건데 이것도 Root에서 받아와야 하나? 아니면 페이지별로 저장할 수 있나 쨋든 타이틀
					- 페이지별로 다른값이 출력되면 됨.
			[서버]
				관심 게임 체크(노란 별) : 서버명이 출력되는 상태일 때 같이 보이면 된다.
					- 이건 한번 찾아봐야 할 것 같은데, props로 넘겨주기 전에 명시하는거? 그거 사용하면 될 것 같음.
		header_tab
			[메인 상태]
				홈, 게임 검색, 관심 게임, 거래 순위 : 클릭했을 때 container의 상태값? state를 변경해주면 될 것 같다.
				탭 바 : 위의 탭을 옮길 때 하단에 따라다니는 것, 테스트 페이지에서 만든게 있으니 그거 이용하면 될 것 같음.
			[세부 상태]
				X : 세부 상태일때는 없어지면 된다. 이 값도 Root에서 관리해서 없애면 될 것 같음.
		container
			메인과 서브의 구분 없이 컴포넌트로 넣으면 될 것 같은데
				home_list 컴포넌트, search_list 컴포넌트, favorite_list 컴포넌트
				rank_list 컴포넌트 등등으로 컴포넌트 형태로 State에 따라서 다른 컴포넌트가 렌더링 될 수 있도록 만들기.
			[메인]
				[홈]
					서브 타이틀 : 이걸 어떻게 해야할지 잘 모르겠는데 이 값이 State로 설정되면 될 것 같음.
						- 컴포넌트화 하면 될 것 같은데... 검색창에서만 안보이게하고
					게임 목록(2열 세로) : 게임명만 출력되면 된다. 순서는 게임검색의 순위대로 하면 될 것 같음.
					배너 : 슬라이드 배너
				[게임 검색]
					검색 바 : 입력창과 아이콘이 있고, filter 형태로 하단의 목록에서 찾는 형태로 작성하면 될 것 같음.
					입력받는 값에서 한글, 알파벳, 숫자를 제외한 나머지는 전부 제거.
					게임 목록(세로) : 저장된 순서? 정해진 순서대로 출력
						- first-child 빼고 bdt 주면 될 것 같음.
						- filter를 이용해서 입력한 값에 따라서 다르게 출력하면 될 것 같음.
				[관심 게임]
					서브 타이틀 : 컴포넌트 화 하면 될 것 같음.
					게임 > 서버 목록(세로)
						- first-child 빼고 bdt 주면 될 것 같음.
					[+] 버튼 : 클릭했을 때 편집하기는 목록 앞에 아이콘 추가하기
						- 추가하기는 새로운 페이지로 이동
				[거래 순위]
					서브 타이틀 : 컴포넌트 활용, 날짜가 출력되야 한다.
					게임 순위 목록(테이블 형태)
						- 순위, 게임명, 등락(아이콘)이 출력되어야 한다.
						- 등락을 어떤 형태로 정해야 할지에 대해서 고민해봐야 함.
						- 게임 클릭 시 웹앱으로 넘어간다.
			[세부]
				[설정]
					정보 탭 : 하위 항목으로 버전만 표시
					개인정보 처리방침 : "개인정보처리방침 보기" 페이지로 이동
					[개인정보 처리방침 > ">" 클릭 시]
						개인정보 처리방침 관련 텍스트가 있는 페이지로 이동
				[홈, 게임검색,  > 게임 선택 시]
					서브 타이틀 : 기준 : ~금액 출력
					주요 내용 : 서버, 평균가, 등락 아이콘 출력
						서버 선택 시 해당 서버에 대한 자세한 정보가 저장된 페이지로 이동
	  

[환경 설정]
개발환경 : React-Native
TDD 툴 : Jest || React Testing Library
코딩 툴 : VSCode

[오늘 할 일(0610 ~ 0612)]
1. TDD 방법을 통해서 개발하려면 어떤 것들이 준비되어야 하는지 알아보고 그 단계들 정의하기
  1. 요구명세? 기능명세 작성하기
    - 이 부분은 "테크스펙"을 작성하는 방향으로 생각해보기
      - 그러면 테크스펙은 어떻게 작성?
	- 그 부분은 대략적으로 적혀있긴 하지만
	  어제 작성해봤을 때 생각해보면 분리를 해야 할 필요가 있어보임.
	  탭이 4가지 이니까 5개로 분리하기.
  	    하나는 기타 페이지
	    탭 4가지에 세부 페이지까지 넣기
	      세부 페이지는 서로 연동된다는 것을 잊지 말기
	      연동되어도 뒤로가기는 이전 페이지로 이동.
  2. 테스 스펙에 맞춰서 테스트 내용 작성하고 테스트 페이지 만들기
2. 정의한 단계를 이용해서 간단한 Todo-List 만들기 전 기초작업 준비하기

[계획]
1. TDD를 하는데 필요한 것들과 단계 정의하기(매우 중요)
  1. 목적 정의하기
  2. 목적에 맞춰서 테스트 코드 작성하기
  3. 테스트 코드 실행하기
  4. 테스트 코드에 맞춰서 프로덕트 코드 작성하기
  5. 테스트 후 다음 목적에 맞는 테스트 코드 작성하기(반복)
2. TDD를 이용해 간단한 React 프로젝트를 정의한 단계에 맞춰서 만들기
3. 

[목표]
	[0613 ~ 0617]
	1. 로딩 창과 "홈" 탭의 테크스펙 완성하기
	2. 테크스펙을 이용해 React, TDD로 구현하기
	3. 구현된 내용을 React-Native로 변경하기
	4. 
	[질문?]
		현재 학습한 내용대로 잘 만들고 있는지 확인이 필요할 것 같음.

[생각]
# React로 만들고 React-Native로 옮기는 방법
  - 이 부분은 어디에서 문제가 발생할지 잘 모르겠음.
  - 옮기는 부분에서 어느 부분들이 문제가 발생하는지 알아봐야 할 것 같음.
# Jest 나 다른 TDD 툴은 어떤 것들을 활용해야 할까?
  - 일단 찾아본 것들 중 많이 보이는 Jest로 선택하긴 했는데
    실제 사용해보고 동작을 익힌 뒤 여러가지 활용법에 대해서 작성할 필요가 있음.
	- 찾아보니까 아예 기본으로 들어가는게 있어서 그걸 활용하는 방법을 생각해봐야 할 것 같음
		- 그게 React-Native도 가능한거라 그쪽으로 생각해봐야 할 것 같음.
		testing-library가 create-react-app으로 생성했을 때 자동으로 생성된다.
# 메인페이지에서 주로 출력되는 항목은 게임 이름이다.
	- 그러면 정렬의 기준을 이름으로 해야할까?
	- JSON의 데이터를 어떻게 해야할지 고민해보기.
		- 진솔 연구원님께 물어보는것도 생각해봐야 할 것 같음.
		- 아니면 용 연구원님이나...
		= 현재 상태는 날짜를 기준으로 만들었는데 바꿔야 할 필요성이 있어보임.
			- 게임명을 기준
			- 날짜는 내부에
			- 금액은 시작부터 바뀐 값을 어딘가에 따로 저장할까?
				- 날짜별로 날짜와 금액을 저장하는게 옳은 것 같음.
				- 데이터를 가장 적게 저장할 수 있는 방법으로.
				그러면 게임명을 기준으로 하고 서버별 날짜와 금액을 추가하는 형태
			! 게임명이 기준이고 날짜는 서버별로 저장된다.
			! 게임 세부일 때 가장 최근에 저장된 날짜의 값이 보여진다.
			! 서버 세부일 때 최근부터 과거 순으로 15일 정도 되는 변경된 값이 보여져야 한다.
				- 그러면 구조는
				{
				게임명
				랭크
				기준 금액
				서버명
					[
					서버별 금액 최근 ~ 과거
					금액별 날짜 : 15일만
					]
				},
		- 표 형태로 만드는 방법도 어떻게 할 것인지 생각해놔야 함.
# 로딩창은 root에 넣고 Interval 추가해서 1초마다 JSON이 정상적으로 받아졌는지 확인하고 clear
	- 할 수 있으면 로딩 게이지? 아니면 마인크래프트 같은 것 처럼 로딩할 때 어떤게 진행되고 있는지 나오면 좋을 것 같음.

# 테스트는 어떤 종류들을 추가해야 하는지
	- State가 원하는 상태로 변경되는지 변경될 때마다 확인하기
	- 값이 정상적으로 잘 받아와 졌는지
	- 
# Testable한 코드를 짜려면 어떻게 해야할까?
	- 결과물이 return 으로 나올 수 있도록 만들고 그 값을 관리하는 함수도 있으면 좋을 것 같다.
	- 관리하는 함수에 같은 변수에 함수를 이용해 변경된 값을 계속 넣으면서 원하는 값이 반환되는 형태면 될 것 같다.
# TDD 과정
[테스트 실패]
	1. 구체적인 하나의 요구사항을 검증하는 하나의 테스트를 추가
	2. 추가된 테스트가 실패하는지 확인
	- 실패하는 것을 확인해야 테스트가 동작함을 믿을 수 있다.
	- 운영 코드 변경이 진행되지 않았기 때문에 실패했는지 또한 확인해야 한다.
		- 테스트를 잘못 짰기 때문에 실패한 것은 아닌지 확인해야 한다.
[테스트 성공]
	1. 추가된 테스트를 비롯해 모든 테스트가 성공하도록 운영 코드를 변경
	2. 테스트 성공은 요구사항 만족을 의미
		- 코딩의 가장 중요한 임무
	3. 테스트 성공을 위한 최소한의 변경
		- 가장 중요한 임무를 가장 빠르게 완수
* [주의사항]
	TDD는 불안함을 지루함으로 바꾸는 것이다.
	앞으로 좋을 것 같은 코드를 테스트 없이 추가했을 때
	그 코드가 다른 어딘가에 무슨 장애를 일으킬지 모르기 때문에 조심해야 한다.
	그래서 테스트를 통과할만한 최소한의 코드만 작성할 수 있도록 해야한다.
[리팩터링]
	코드베이스 정리
	구현 설계 개선
		-가독성
		-적응성
		-성능
	모든 테스트 성공을 전제
[좋은 테스트의 특징]
FIRST
Fast : 테스트는 빠르게 동작하여 자주 돌릴 수 있어야 한다.
Independent : 각각의 테스트는 독립적이며 서로 의존해서는 안된다.
Repeatable : 어느 환경에서도 반복 가능해야 한다.
Self-Validating : 테스트는 성공 또는 실패로 Bool 값으로 결과를 내어 자체적으로 검증되어야 한다.
Timely : 테스트는 적시에 즉, 테스트하려는 실제 코드를 구현하기 직전에 구현해야 한다.

[비즈니스 로직]
이 부분은 어떤걸 말하는지 잘 모르겠으니 다시 정의하기
서비스별로 연결하는 부분에 대해서 말하는건가?

[컴포넌트]
컴포넌트에서 생길 수 있는 경우와 테스트 케이스들
1. Props가 잘 받아와 졌는가?
2. State가 의도한 대로 잘 관리되고 있는가?
3. Props나 State를 토대로 Component가 잘 rendering 되고 있는가?
4. event handler 가 잘 동작하고 있는가?
5. lifecycle에 맞게 동작하는가?

# 고민
1. 이미지와 데이터는 알아서 찾으면 되는걸까?
	- 어떻게 준비하면 될까?
	- 일단 출력할 때 필요한 game_list 부분과 로스트아크만 있긴 하지만 server_list도 추가하긴 했는데..
		- server_list에서 price 증감값 출력하는 부분에서 random 추가해서 값이 다양하게 출력되면 좋을 것 같다.
2. 시세앱 만드는게, 내가 임의로 바꾸고 싶은 부분들은 바꿔도 괜찮은건가?
	- 아니면 일단 있는 상태를 만들고 그 이후에 시간이 남았다면 수정하는 방향으로 해야하는건가?
		- 바꾸고 싶은거 바꿨다가 이상해질 수 있을듯
3. 