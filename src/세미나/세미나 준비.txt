[목적] 
TDD를 활용한 React 시세 앱 개발

시세 앱은 출력하는 정보량은 정해져 있으며, 자세한 정보의 출력은 웹 앱으로 이동하는 팝업을 출력한다.
메인 페이지에서는 게임의 제목만 출력된다.
세부 페이지에서 상세 내용이 출력된다.
주로 출력되는 항목은 이름이다.
	- 그러면 정렬의 기준은 게임 이름으로 해야할까?
		> ㅇㅇ
		- 게임 이름과 서버별 금액을 따로 만들기
		- 게임 이름만 출력되는 곳이 있고
		- 게임 이름을 기준으로 게임의 서버별 날짜와 금액이 출력되는 부분.
	- 값은 게임을 선택했을 때 해당 게임의 서버로 들어가면 될 것 같다.

# 발생한 문제
	1. 로딩 부분 : 파일을 받아오고, 받아오는 동안 보여주는 형태로 해야하는데
		- 그 부분의 구현을 어떻게 해야하는지 모르겠음.....
	2. [관심게임]에서 관심 게임 목록 저장하는 내용 추가하기
		- 아직 추가하기 페이지도 만들지 못함.
		- 추가하기 페이지는 파일 2개 불러와서 
	3. [거래순위]에서 값 출력하기
		a 태그 또는 li에 클릭이벤트 부여해서 처리하기.
		> 이건 해결된 것 같음.
	4. HeaderTop 에서 위치별 출력값 분류하기
		Tab 일 때는 크게 상관 없는데, 세부 페이지에서 문제 발생함.
		state를 전달해서 해결하는 방법에 대해서 생각해봐야 할 것 같음.
			- 그러면 Link를 다 Navigate로 변경해야 할 것 같음.

# 고민
	1. Games에서 페이지 더 이동하지 않고 하나로 처리할 수 있지 않을까?
		- 그러면 뒤로가기가 문제.
	2. Router를 이용해서 링크를 잘 연동하려면 어떻게 해야할까?

# 페이지
	[메인] 4개
		홈
		게임검색
		관심게임
		거래순위
	[세부] 7개
		[앱 접속]
			로딩 페이지 : 첫 로딩 화면
		[메인 페이지 > [>] 버튼 클릭 시]
			설정 : 최상단의 [>] 버튼 클릭 시 출력
			[설정 > 개인정보 처리방침 보기의 [>] 버튼 클릭 시]
				개인정보 처리방침 보기
		[홈 > 게임 이름 클릭 시]
		[게임 검색 > 게임 이름 클릭 시]
		[관심 게임 > 게임 이름 클릭 시]
			서버 목록창 : 해당 게임의 모든 서버와 평균가, 등락 출력
			[서버 목록창 > 서버 클릭 시]
				서버 15일 평균가 창(표 보기)
		[그래프 탭 클릭 시]
			서버 15일 평균가 창(그래프 보기)
		[관심 게임 > [+] 버튼 선택 시]
			- 추가하기 : 게임목록이 출력되고 게임목록 클릭 시 서버목록 출력, 서버목록 클릭 시 팝업창 출력되고 관심게임 등록 가능
			  - 기존 화면에 버튼 추가
			편집하기 : 현재 페이지에서 (-) 버튼이 출력되고 해당 버튼 클릭 시 관심 서버 제거를 물어보는 팝업창 출력

# 컴포넌트
[index] : router로 App.js를 연결하는 역할.
  - 실질적으로 ReactDom에 render 하는 부분이 있다.
	[App] : 모든 파일을 연결하는 파일
	  [Loading]
			파일을 다운로드 하는 동안 출력할 페이지
			isLoading이 false가 되면 메인 페이지를 출력한다.
		[HeaderTop]
			[메인 상태] : path가 "/"인 부분일 때 출력
				링크 : 웹앱으로 연결되는 링크(팝업창)
				로고 : 그냥 이미지, 배경으로 넣어버려도 괜찮으려나?
				설정 : 클릭했을 때, 설정창(세부)으로 이동
			[세부 상태] : 
				뒤로가기 : Router의 navigate 사용하기.
				타이틀(제목 || 게임명 || 서버명) : path가 "/"가 아닐 때 주소에 맞춰서 Title용 state를 switch문으로 변경하는 걸 추가하기
				관심 게임 체크(노란 별) : 
				1. path가 "games/servers" 였을 때 출력하는 것을 추가하기.
				2. 해당 path가 있으면 별을 보여주고, 없으면 안보여주기?
					값은 별 svg로 넣고, fill 이용해서 클래스 추가해서 별 on/off 하기
				3. 별을 클릭했을 때 함수를 실행해서 경고창을 출력하고, 해당 게임, 서버를 로컬스토리지에 형식에 맞춰서 저장하기.
			[Main] : index 로 지정
				[MenuTab] : 메뉴 목록이 출력
					tab, setTab을 가지고, 클릭이벤트 발생 시 로컬스토리지에 tab 저장.
						- 로컬스토리지에 저장해야 페이지 이동해서 state가 초기화 되어도 정상적으로 불러올 수 있다.
				[Container] : tab에 따라서 다른 값 출력
					- Link나 navigate를 이용해서 해당 게임의 값을 가지고 Games 페이지로 이동
					- 출력되는 결과는 게임명과 기타 정보밖에 없으니 GameList만 가져와서 출력
					- 탭별로 다른 컴포넌트 생성해서 출력
					! rank는 웹앱으로 이동해야 하는 것 주의하기
					?? 서브 타이틀 출력하는 부분을 tab 값에 따라서 다르게 출력하는것 생각하기.
					서브 타이틀 : tab에 따라서 switch로 분기할 수 있도록 만들기
						- 컴포넌트화 하면 될 것 같은데... 검색창에서만 안보이게하고
					[홈]
						게임 목록(2열 세로) : 게임명만 출력되면 된다. 순서는 게임검색의 순위대로 하면 될 것 같음.
						ul#home_list에 item만 다르게 출력될 수 있도록 만들기
						! 공통항목은 .item 클래스에 추가해서 출력하기.
					[게임 검색]
						검색 바 : 입력창과 아이콘이 있고, filter 형태로 하단의 목록에서 찾는 형태로 작성하면 될 것 같음.
						입력받는 값에서 한글, 알파벳, 숫자를 제외한 나머지는 전부 제거.
						- 단독 항목이기 때문에 컴포넌트화 X
						게임 목록(세로) : 저장된 순서? 정해진 순서대로 출력
							- first-child 빼고 bdt 주면 될 것 같음.
							- filter를 이용해서 입력한 값에 따라서 다르게 출력하면 될 것 같음.
							- ul#search_list .item 으로 스타일 구성하면 될 것 같음.
					[관심 게임]
						게임 > 서버 목록(세로)
							- first-child 빼고 bdt 주면 될 것 같음.
						[+] 버튼 : 클릭했을 때 편집하기는 목록 앞에 아이콘 추가하기
							- 추가하기는 새로운 페이지로 이동
							정보의 출력은 어떻게?
							localStorage에서 getItem으로 값이 있는지 확인
								- 없다면 페이지 중앙에
								아래 (+) 버튼을 사용하여 관심게임을 추가 해주세요.
								출력
								- 있다면 관심 게임 목록을 출력
									- 저장하는 데이터의 형식은 | 또는 , 를 이용해서 값을 분리해 배열로 만들 수 있도록 만들기
									- 저장하는 값은 gamename,servername|
									- 데이터의 저장 또한 문자열로 비슷한 방식을 이용해 저장
									- 데이터의 수정은 X를 클릭해 수정했을 때 해당 배열을 제거 후 전체를 문자열로 합쳐 저장?
									- indexOf를 이용해서 문자열에서 찾아서 삭제...
									- 값이 추가될 수 있으니 "|" 를 이용해 목록을 분할.
									- 아니면 [gamename,servername]의 형태로 저장해서 
									[gamename,servername][gamename,servername]
									"]" 로 나누고 "[" 는 따로 제거
									

					[거래 순위]
						서브 타이틀 : 컴포넌트 활용, 날짜가 출력되야 한다.
						게임 순위 목록(테이블 형태)
							- 순위, 게임명, 등락(아이콘)이 출력되어야 한다.
							- 등락을 어떤 형태로 정해야 할지에 대해서 고민해봐야 함.
								- 등락은 전일 랭크와 숫자를 비교해서 적용하기
								- switch를 이용해서 > = < 에 따라서 다른 값이 들어갈 수 있도록 만들면 될 것 같음.
							- 게임 클릭 시 웹앱으로 넘어간다.
								함수를 만들어서 클릭했을 때 경고창을 띄워주고, 해당 게임의 웹시세 페이지로 이동할 수 있도록 만들어 놓으면 좋을 것 같음.
								1. 클릭했을 때 함수를 실행
								2. 경고창 출력 후 확인 > 웹페이지로 이동.
								3. 웹페이지는 gamename에 현재 게임으로 보내주면 된다.

			[세부]
				[Settings]
					정보 탭 : 하위 항목으로 버전만 표시
					개인정보 처리방침 : "개인정보처리방침 보기" 페이지로 이동
					[개인정보 처리방침 > ">" 클릭 시]
					[PrivateInfo]
						개인정보 처리방침 관련 텍스트가 있는 페이지로 이동
				[홈, 게임검색,  > 게임 선택 시]
				Games
					서브 타이틀 : 기준 : ~금액 출력
					주요 내용 : 서버, 평균가, 등락 아이콘 출력
						서버 선택 시 해당 서버에 대한 자세한 정보가 저장된 페이지로 이동
						Servers
						* 필요한 값 : game_data에서 game_name, standard 필요.
						* 특이사항 : HeaderTop에서 /games 와 /games/servers를 어떻게 구분할 것인지 생각해야 할 것 같음.
						- 서브 타이틀 : 기준 : 기준 금액 출력
						- view, setView를 이용해서 표와 그래프 출력하는 부분 나누기
						- 표
							날짜

	  

[환경 설정]
개발환경 : React-Native
TDD 툴 : Jest || React Testing Library
코딩 툴 : VSCode

[오늘 할 일(0610 ~ 0612)]
1. TDD 방법을 통해서 개발하려면 어떤 것들이 준비되어야 하는지 알아보고 그 단계들 정의하기
  1. 요구명세? 기능명세 작성하기
    - 이 부분은 "테크스펙"을 작성하는 방향으로 생각해보기
      - 그러면 테크스펙은 어떻게 작성?
	- 그 부분은 대략적으로 적혀있긴 하지만
	  어제 작성해봤을 때 생각해보면 분리를 해야 할 필요가 있어보임.
	  탭이 4가지 이니까 5개로 분리하기.
  	    하나는 기타 페이지
	    탭 4가지에 세부 페이지까지 넣기
	      세부 페이지는 서로 연동된다는 것을 잊지 말기
	      연동되어도 뒤로가기는 이전 페이지로 이동.
  2. 테스 스펙에 맞춰서 테스트 내용 작성하고 테스트 페이지 만들기
2. 정의한 단계를 이용해서 간단한 Todo-List 만들기 전 기초작업 준비하기

[계획]
1. TDD를 하는데 필요한 것들과 단계 정의하기(매우 중요)
  1. 목적 정의하기
  2. 목적에 맞춰서 테스트 코드 작성하기
  3. 테스트 코드 실행하기
  4. 테스트 코드에 맞춰서 프로덕트 코드 작성하기
  5. 테스트 후 다음 목적에 맞는 테스트 코드 작성하기(반복)
2. TDD를 이용해 간단한 React 프로젝트를 정의한 단계에 맞춰서 만들기
3. 

[목표]
	[0613 ~ 0617]
	1. 로딩 창과 "홈" 탭의 테크스펙 완성하기
	2. 테크스펙을 이용해 React, TDD로 구현하기
	3. 구현된 내용을 React-Native로 변경하기
	4. 
	[질문?]
		현재 학습한 내용대로 잘 만들고 있는지 확인이 필요할 것 같음.

[작업 순서]
1. 목표 정의하기
	- 페이지별 동작과 필요한 기능들 정의해서 테크스펙 작성하기
2. React-Native 초기 화면 구성하기
	- 초기 세팅 및 환경설정
	* 초기 세팅 및 환경설정 관련해서 캡쳐 필요
3. React-Router 구성하기
	- 경로별로 원하는 컴포넌트가 출력되는지 확인하는 테스트 작성 후 페이지 Router 구성하기
4. State 구성하기
	- State를 어디에서 어디로 이동할 것인지 테스트 작성 후 코드 작성하기
5. 데이터 가져와 출력하는 부분 설정하기.

[생각]
# React로 만들고 React-Native로 옮기는 방법
  - 이 부분은 어디에서 문제가 발생할지 잘 모르겠음.
  - 옮기는 부분에서 어느 부분들이 문제가 발생하는지 알아봐야 할 것 같음.
# Jest 나 다른 TDD 툴은 어떤 것들을 활용해야 할까?
  - 일단 찾아본 것들 중 많이 보이는 Jest로 선택하긴 했는데
    실제 사용해보고 동작을 익힌 뒤 여러가지 활용법에 대해서 작성할 필요가 있음.
	- 찾아보니까 아예 기본으로 들어가는게 있어서 그걸 활용하는 방법을 생각해봐야 할 것 같음
		- 그게 React-Native도 가능한거라 그쪽으로 생각해봐야 할 것 같음.
		testing-library가 create-react-app으로 생성했을 때 자동으로 생성된다.
# 메인페이지에서 주로 출력되는 항목은 게임 이름이다.
	- 그러면 정렬의 기준을 이름으로 해야할까?
	- JSON의 데이터를 어떻게 해야할지 고민해보기.
		- 용 연구원님이나 진솔 연구원님께 물어보는것도 생각해봐야 할 것 같음.
		= 현재 상태는 날짜를 기준으로 만들었는데 바꿔야 할 필요성이 있어보임.
			- 게임명을 기준
			- 날짜는 내부에
			- 금액은 시작부터 바뀐 값을 어딘가에 따로 저장할까?
				- 날짜별로 날짜와 금액을 저장하는게 옳은 것 같음.
				- 데이터를 가장 적게 저장할 수 있는 방법으로.
				그러면 게임명을 기준으로 하고 서버별 날짜와 금액을 추가하는 형태
			! 게임명이 기준이고 날짜는 서버별로 저장된다.
			! 게임 세부일 때 가장 최근에 저장된 날짜의 값이 보여진다.
			! 서버 세부일 때 최근부터 과거 순으로 15일 정도 되는 변경된 값이 보여져야 한다.
				- 그러면 구조는
				{
				게임명
				랭크
				기준 금액
				서버명
					[
					서버별 금액 최근 ~ 과거
					금액별 날짜 : 15일만
					]
				},
		- 표 형태로 만드는 방법도 어떻게 할 것인지 생각해놔야 함.
# 로딩창은 root에 넣고 Interval 추가해서 1초마다 JSON이 정상적으로 받아졌는지 확인하고 clear
	- 할 수 있으면 로딩 게이지? 아니면 마인크래프트 같은 것 처럼 로딩할 때 어떤게 진행되고 있는지 나오면 좋을 것 같음.

# 테스트는 어떤 종류들을 추가해야 하는지
	- State가 원하는 상태로 변경되는지 변경될 때마다 확인하기
	- 값이 정상적으로 잘 받아와 졌는지
	- 
# Testable한 코드를 짜려면 어떻게 해야할까?
	- 결과물이 return 으로 나올 수 있도록 만들고 그 값을 관리하는 함수도 있으면 좋을 것 같다.
	- 관리하는 함수에 같은 변수에 함수를 이용해 변경된 값을 계속 넣으면서 원하는 값이 반환되는 형태면 될 것 같다.
# TDD 과정
[테스트 실패]
	1. 구체적인 하나의 요구사항을 검증하는 하나의 테스트를 추가
	2. 추가된 테스트가 실패하는지 확인
	- 실패하는 것을 확인해야 테스트가 동작함을 믿을 수 있다.
	- 운영 코드 변경이 진행되지 않았기 때문에 실패했는지 또한 확인해야 한다.
		- 테스트를 잘못 짰기 때문에 실패한 것은 아닌지 확인해야 한다.
[테스트 성공]
	1. 추가된 테스트를 비롯해 모든 테스트가 성공하도록 운영 코드를 변경
	2. 테스트 성공은 요구사항 만족을 의미
		- 코딩의 가장 중요한 임무
	3. 테스트 성공을 위한 최소한의 변경
		- 가장 중요한 임무를 가장 빠르게 완수
* [주의사항]
	TDD는 불안함을 지루함으로 바꾸는 것이다.
	앞으로 좋을 것 같은 코드를 테스트 없이 추가했을 때
	그 코드가 다른 어딘가에 무슨 장애를 일으킬지 모르기 때문에 조심해야 한다.
	그래서 테스트를 통과할만한 최소한의 코드만 작성할 수 있도록 해야한다.
[리팩터링]
	코드베이스 정리
	구현 설계 개선
		-가독성
		-적응성
		-성능
	모든 테스트 성공을 전제
[좋은 테스트의 특징]
FIRST
Fast : 테스트는 빠르게 동작하여 자주 돌릴 수 있어야 한다.
Independent : 각각의 테스트는 독립적이며 서로 의존해서는 안된다.
Repeatable : 어느 환경에서도 반복 가능해야 한다.
Self-Validating : 테스트는 성공 또는 실패로 Bool 값으로 결과를 내어 자체적으로 검증되어야 한다.
Timely : 테스트는 적시에 즉, 테스트하려는 실제 코드를 구현하기 직전에 구현해야 한다.

[비즈니스 로직]
이 부분은 어떤걸 말하는지 잘 모르겠으니 다시 정의하기
서비스별로 연결하는 부분에 대해서 말하는건가?

[컴포넌트]
컴포넌트에서 생길 수 있는 경우와 테스트 케이스들
1. Props가 잘 받아와 졌는가?
2. State가 의도한 대로 잘 관리되고 있는가?
3. Props나 State를 토대로 Component가 잘 rendering 되고 있는가?
4. event handler 가 잘 동작하고 있는가?
5. lifecycle에 맞게 동작하는가?

# 고민
1. 이미지와 데이터는 알아서 찾으면 되는걸까?
	- 어떻게 준비하면 될까?
	- 일단 출력할 때 필요한 game_list 부분과 로스트아크만 있긴 하지만 server_list도 추가하긴 했는데..
		- server_list에서 price 증감값 출력하는 부분에서 random 추가해서 값이 다양하게 출력되면 좋을 것 같다.
2. 시세앱 만드는게, 내가 임의로 바꾸고 싶은 부분들은 바꿔도 괜찮은건가?
	- 아니면 일단 있는 상태를 만들고 그 이후에 시간이 남았다면 수정하는 방향으로 해야하는건가?
		- 바꾸고 싶은거 바꿨다가 이상해질 수 있을듯
3. Link 중에서 tab 값을 계속 유지해야 한다면 navigate로 변경하기.
	- 그렇지 않으면 tab 값이 ""으로 초기화 된다.

# Router 적용한 구조
index : client에 render 하는 부분
	App : Loading 페이지 출력, Router로 묶어주는 역할
		HeaderTop : 모든 페이지에서 보여야 함.
			- Outlet을 이용해 다른 페이지 출력.
			* 특이사항 : 메인 페이지에서 좌측 버튼은 a태그를 이용해서 웹앱으로 경고창 띄우고 이동해야 함.
			Main : index("/") 출력
				- tab State값은 localStorage를 이용해서 유지
				* favorite_list도 localStorage에 저장해야 할 것 같음.
				MenuTab : tab 값을 변경해 Container의 출력형태를 변경한다.
					필요한 값은 tab, setTab
				Container : tab 값에 따라서 다른 값을 출력한다.
					필요한 값은 tab, Link(game)로 이동
					* 특이사항 : rank에서는 게임명 클릭했을 때 a태그를 이용해서 웹앱으로 경고창 띄우고 이동해야 함.
			Games : Container에서 게임을 클릭했을 때 변경될 페이지
				- 여기서는 뒤로가기만 사용해도 괜찮은지 테스트해봐야 할 것 같음.
				- history 없어지고 navigate로 바뀜!
				Servers : Games에서 서버를 클릭했을 때 변경될 페이지
				- 여기서는 뒤로가기만 사용해도 괜찮은지 테스트해봐야 할 것 같음.
				- history 없어지고 navigate로 바뀜!
			Settings : HeaderTop에서 설정 버튼을 클릭했을 때 변경될 페이지
				- 뒤로갔을 때 tab 값이 유지되어야 한다.
				> localStorage에 저장해서 정상적으로 동작 확인함.
				PrivateInfo : 설정 페이지에서 이동하는 개인정보 처리방침 페이지

# 상태
	tab은 로컬스토리지에 저장하는 방향으로 생각해보기
	favorite의 서버 목록을 js 파일로 새로 생성하거나 수정하는 방향으로 저장하던지
	아니면 로컬스토리지를 이용하던지
		- 그런데 로컬 스토리지가 괜찮아 보이긴 한데...
		- 로컬 스토리지로 적용 완료(tab).

[이번주 할 일(0620 ~ 0624)]
1. TDD 테스트 할 항목들 정의하기
	- State가 정상적으로 전달되고 있는지, 원하는 상태로 바뀌고 있는지
	- 
2. data 파일들을 어떻게 최적화 할 것인지
3. 파일별 구조 및 역할 다시 정의하기

# 구조 다시 정의하기
	- 파일별 구조 정의하고, 테스트가 필요하다고 생각되는 파일들 분류하기.
	- TDD로 만든다고 할 때 어떻게 시작할 것인지 생각하기
		1. 문제 정의하기
			- 문제가 정의되어야 테스트를 시작할 수 있다.
		* 개발할 때 알아가면서 내용을 추가했던 것을 어떻게 세미나에 추가할 수 있을지 생각해보기
			- react-router-dom이 버전업이 많아서 공식 문서같은데서도 정상적으로 동작하는 것을 확인하기 어려웠다는 내용도 추가하면 좋으려나?
		2. 정의한 문제에 맞춰서 테스트를 작성하고
			- 이건 render가 잘 되었는지부터 시작해야 하나?
			만약 render 부터 한다면 render 부분만 따로 나눠서 description으로 분리해놓으면 좋을 것 같음
		* 구조를 정의하고, 1번째로 구조에 맞춰서 router 설정하는 부분 내용으로 만들기
			1. router를 추가하는 것에 맞춰서 테스트 먼저 진행하고 내용 추가하기
			2. 정적인 내용 추가하고 다시 테스트(필요하면 테스트 더 추가)
			3. state를 추가했을 때의 동작에 대해서 테스트를 진행하고 state 추가하기
			4. router에서 페이지를 이동했을 때 state가 초기화 되는 부분에 대해서 테스트 결과 확인 후 내용 작성하기
			5. 페이지에 data 연결 후 동작에 대한 테스트 작성 후 내용 작성하기
			* 테스트를 먼저 작성해야 하는 이유를 세미나 발표 자료에 추가해야 함.
			* 테크스펙 작성한 것도 넣어보면 좋을 것 같음.
			* render 부분, 파일 또는 state가 정상적으로 수정되는지 테스트하는 부분
				- state 테스트 하는 부분은 fireEvent로 클릭이벤트 발생했을 때 정상적으로 동작하는지 확인해야 함.
				- 초기화도 정상적으로 되고, 다시 localStorage에서 잘 받아오는지 등등 테스트 해야 함.