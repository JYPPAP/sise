작성자: 조영수
조직: 플랫폼개발
마지막 수정일: 2022-06-12
프로덕트 스펙: 
JIRA Epic: 

# 요약 (Summary)
서버 페이지는 게임목록 페이지에서 서버을 선택했을 때 해당 게임 서버의 15일동안의 등락 폭, 평균가를 출력해준다.


# 목표 (Goals)
header_top 컴포넌트에서 Title 부분이 서버명으로 출력되어야 한다.
/games/:gameName/server/:serverName일 때만 우측에 별이 출력되어야 한다.
해당 별을 클릭하면 localStorage 에 게임, 서버의 값을 저장한다.

# 계획 (Plan)
header_top 컴포넌트를 불러온다.



[header_tab]
header_tab에서 "홈" 탭은 볼드처리 되어있고, 하단에 tab_bar는 home를 강조한 상태로 되어있다.

다른 페이지에서 "홈"탭을 눌렀을 때 홈으로 가기 위해서는 State나 Props를 어디에 저장하고 어디로 옮겨야 할까?
header_tab에 클릭이벤트가 발생하면 tab 과 setTab을 준비해서 현재 tab 값과 클릭한 요소가 가지고 있는 tab값을 비교해서 같다면 아무 동작을 하지 않고, 다르다면 setTab 값을 변경 후 새로 렌더링 한다.
{ tab, setTab } 객체는 Root에서 관리한다.
Root에서 관리하는 이유는 하위 목록인 header_tab 과 container를 같이 변경해줘야 하기 때문이다.
Root에 저장해줘야 나중에 뒤로가기를 했을 때 이전 탭으로 원활하게 돌아갈 수 있다.
tab_bar에 transition을 추가했기 때문에 tab_bar에 클래스를 추가하는 방식을 이용해 애니메이션을 동작시켜야 한다.

[container]
container의 subtitle은 아이콘과 "대표 게임" 텍스트가 출력된다.
그 아래로 list 와 item이 출력된다.
item을 클릭하면 해당 게임의 서버 목록 창으로 이동한다.
	- 서버 목록으로는 어떻게 이동시키지?
		- data-game에 DB에서 가져온 값 또는 textContent를 읽어서 검색한 뒤 넣어주면 될 것 같은데
최하단에는 배너가 출력된다.

container는 p10
현재 tab State의 값이 home 일 때 container에 home 탭이 출력되도록 만든다.
subtitled의 텍스트는 tab 값에 따라서 다른 값이 출력될 수 있도록 만든다. mb10

ul.home_list>(li.home_item)*12의 형태로 만든다.
home_item에 nth-child(2n)마다 mr 제거, mb는 mr과 동일한 값을 계산해 추가한다.
poa로 최하단에 배너가 들어갈 자리를 슬라이드 형태로 작성한다.
	해당 슬라이드는 컴포넌트화 한다.


테크 문서에서 가장 긴 파트입니다. 당신이 준비한 모든 리서치, 준비 내용들을 씁니다. 여기에 어떻게 기술적, 엔지니어링적으로 접근할지 상세히 묘사하세요. 만약 어떤 부분을 어떻게 할지 확실히 결정하지 못한 상태라면, 어떤 것들을 고려하고 있는지 다 목록화해서 적으세요. 그러면 이 문서 리뷰어들이 당신의 올바른 결정에 도움을 주게 됩니다. 얼마나 기술적으로 깊게 써야 하는지는 이 테크 스펙의 목적과 독자들에 따라 정합니다. 생산적인 제안을 받을 수 있도록 충분히 상세하게 적으세요.
여기는 어떻게 프로젝트가 다른 시스템들과 상호작용하는지 그림이나 다이어그램을 포함하기 좋은 지점입니다. 사용자와 시스템 간의 시퀀스 다이어그램, 서비스와 API 간의 데이터 흐름 다이어그램, 데이터베이스 ERD 등 다 좋습니다. 
이 테크 스펙이 로우 레벨까지 다뤄야 한다면 HTTP 응답 코드, JSON 요청 / 응답 포맷, 에러 명세 등까지 모두 다뤄져야 합니다.
보안, 개인정보, 리스크 (Security, Privacy, Risks)
이 프로젝트가 외부로 공개되는 서비스라면, 어떤 보안 위험이 있을지 리스트화하세요. 프로젝트 리스크를 따져 보면 리뷰어가 이 서비스, 제품을 비판하더라도 스트레스를 덜 받습니다. :) 이런 부정적인 측면도 조명해 리뷰어들이 답을 제안하도록 하면 결과적으로 그 기능은 더욱 안정적이게 됩니다. 
이외 고려사항들 (Other Considerations)
고려했었으나 하지 않기로 결정된 사항들을 적습니다. 이렇게 함으로써 이전에 논의 되었던 주제가 다시 나오지 않도록 할 수 있고, 이미 논의되었던 내용이더라도 리뷰어들이 다시 살펴볼 수 있도록 합니다.
예) 앱 데이터 초기화 시에는 사용자가 커스텀했던 리스트를 모두 날리기로 했었으나, 기존 로직에서 앱 데이터 초기화 시에 로컬 관련 추가 핸들링이 없어 이 기능에서도 앱 데이터 초기화 때에 리스트를 날리는 등 추가적인 기능 구현을 하지 않기로 함.
마일스톤 (Milestones)
프로젝트를 제 시간에 맞추기 위해 대략적인 마일스톤을 공유하세요.
예)
1. ~ 9/25: BPL 컴포넌트 개발
2. 9/28 ~ 9/29: 실험 변수 추가, 로컬 변수 추가
3. 9/30 ~ 10/4: 추석 연휴!
4. 10/5: 하단 탭 확장 가능한 구조로 리팩토링
5. 10/6 ~ 10/8: 비즈니스 로직 구현
6. 10/12 ~ 10/20: 사용자 이벤트 부착 및 미진한 내용 보충
7. 10/20: 2.45.0 코드 프리즈 (이때까지 내부 기능 테스트, 이벤트 로깅 테스트)
8. 10/21 ~ 10/23: 2.45.0 릴리즈 QA
9. 11/4: 2.45.0 Rollout
질문들 (Open Questions)
묻고 싶은 설계, 구현 질문들을 적으세요. 피드백을 받고 싶은 질문들도 적으세요. 가치 있는 의견을 줄 수 있는 특정 팀이나 사람에게 리뷰를 요청하는걸 부담스럽게 생각하지 마세요. 
예) 하단 탭을 클릭할 때마다 해당 탭의 순서를 이벤트로 기록하고자 하는데요. 데이터 분석 팀에서 이렇게 해도 효과를 극대화 할 수 있을지 컨펌해 주실 수 있나요?